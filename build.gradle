buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.71.4"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'

version = project.output_version
group = 'com.gitlab.percivalalb' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'Trapcraft-1.17.1'

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

repositories {
    maven {
        url "https://dvs1.progwml6.com/files/maven"
        content { includeGroup "mezz.jei" }
    }
    maven {
        url "https://modmaven.k-4u.nl"
        content { includeGroup "mezz.jei" }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"

//    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
//    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
}

minecraft {
    mappings channel: project.mcp_channel, version: project.mcp_mappings

    runs {
        client {
            taskName 'trapcraft_client'
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                trapcraft.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        server {
            taskName 'trapcraft_server'
            workingDirectory file('run-server')
            property 'forge.logging.console.level', 'debug'
            mods {
                trapcraft.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        data {
            taskName 'trapcraft_data'
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'trapcraft', '--all', '--output', '"' + file('src/generated/resources/') + '"', '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'
            mods {
                trapcraft.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }
    }
}

def replaceResources = tasks.register('replaceResources', Copy) {
    it.outputs.upToDateWhen { false }
    //Copy it into the build dir
    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'version': version, 'mc_version': minecraft_version_range, 'forge_version': forge_version_range, "loader_version": loader_version_range
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}

task sourcesJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('api')
    from sourceSets.api.output
    from sourceSets.api.allJava
}

artifacts {
    archives sourcesJar
    archives apiJar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.main.output
    from sourceSets.api.output

    manifest {
        attributes([
            "Specification-Title": "trapcraft",
            "Specification-Vendor": "percivalalb",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${archiveVersion}",
            "Implementation-Vendor" :"percivalalb",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name": "trapcraft"
        ])
    }
}

import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
task makeChangelog(type: GitChangelogTask) {
    file = new File("build/changelog.html")
    untaggedName = "Current release ${project.version}"
    fromCommit = '3a162ee7d39b89d2ba182f0f8f9f3e744e893c92'
    toRef = 'HEAD'

    templateContent = file('changelog.mustache').getText('UTF-8')
}

curseforge {
    apiKey = findProperty('curseforge_api_key') ?: 0
    project {
        id = project.curseforge_project_id
        changelog = file("build/changelog.html")
        changelogType = 'html'
        releaseType = findProperty("curseforge_release_type") ?: 'alpha'
        addGameVersion '1.17.1'
        addArtifact apiJar
    }
    options {
        forgeGradleIntegration = false
    }
}

// Must be done in afterEvaluate as the specific curseforge$id
// task is generated lazily
afterEvaluate {
    tasks.named("curseforge${project.curseforge_project_id}").get().dependsOn.add(makeChangelog)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact apiJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

if (project.hasProperty('UPDATE_MAPPINGS')) {
    extractRangeMap {
        sources sourceSets.api.java.srcDirs
    }
    applyRangeMap {
        sources sourceSets.api.java.srcDirs
    }
    sourceSets.api.java.srcDirs.each { extractMappedNew.addTarget it }
}
